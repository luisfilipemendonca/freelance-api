// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  FREELANCER
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  CANCELLED
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

model User {
  id                  Int                @id @default(autoincrement())
  username            String             @unique
  email               String             @unique
  password            String
  role                Role               @default(CLIENT)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  clientProfile       ClientProfile?
  freelancerProfile   FreelancerProfile?
  sessions            Session[]
  jobs                Job[]
  clientContracts     Contract[]         @relation("ClientContracts")
  freelancerContracts Contract[]         @relation("FreelancerContracts")
}

model ClientProfile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  companyName String?
  website     String?
  bio         String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FreelancerProfile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  fullName     String?
  title        String?
  bio          String?
  skills       String?
  hourlyRate   Int?
  location     String?
  portfolioUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  userAgent    String?
  ip           String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  budget      Float?
  status      JobStatus @default(OPEN)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clientId    Int
  client      User      @relation(fields: [clientId], references: [id])
  contract    Contract?
}

model Contract {
  id           Int            @id @default(autoincrement())
  jobId        Int            @unique
  job          Job            @relation(fields: [jobId], references: [id])
  clientId     Int
  client       User           @relation("ClientContracts", fields: [clientId], references: [id])
  freelancerId Int
  freelancer   User           @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  terms        String
  status       ContractStatus @default(PENDING)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
